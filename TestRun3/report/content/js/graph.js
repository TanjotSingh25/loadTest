/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 1601.0, "series": [{"data": [[0.0, 4.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 4.0], [0.5, 4.0], [0.6, 4.0], [0.7, 4.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 5.0], [3.7, 5.0], [3.8, 5.0], [3.9, 5.0], [4.0, 5.0], [4.1, 5.0], [4.2, 5.0], [4.3, 5.0], [4.4, 5.0], [4.5, 5.0], [4.6, 5.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 7.0], [11.7, 7.0], [11.8, 7.0], [11.9, 7.0], [12.0, 7.0], [12.1, 7.0], [12.2, 7.0], [12.3, 7.0], [12.4, 7.0], [12.5, 7.0], [12.6, 7.0], [12.7, 7.0], [12.8, 7.0], [12.9, 7.0], [13.0, 7.0], [13.1, 7.0], [13.2, 7.0], [13.3, 7.0], [13.4, 7.0], [13.5, 7.0], [13.6, 7.0], [13.7, 7.0], [13.8, 7.0], [13.9, 7.0], [14.0, 7.0], [14.1, 7.0], [14.2, 7.0], [14.3, 7.0], [14.4, 7.0], [14.5, 7.0], [14.6, 7.0], [14.7, 7.0], [14.8, 7.0], [14.9, 7.0], [15.0, 7.0], [15.1, 7.0], [15.2, 7.0], [15.3, 7.0], [15.4, 7.0], [15.5, 7.0], [15.6, 7.0], [15.7, 7.0], [15.8, 7.0], [15.9, 7.0], [16.0, 7.0], [16.1, 7.0], [16.2, 7.0], [16.3, 7.0], [16.4, 7.0], [16.5, 7.0], [16.6, 7.0], [16.7, 7.0], [16.8, 7.0], [16.9, 7.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 8.0], [18.6, 8.0], [18.7, 8.0], [18.8, 8.0], [18.9, 8.0], [19.0, 8.0], [19.1, 8.0], [19.2, 8.0], [19.3, 8.0], [19.4, 8.0], [19.5, 8.0], [19.6, 8.0], [19.7, 8.0], [19.8, 8.0], [19.9, 8.0], [20.0, 8.0], [20.1, 8.0], [20.2, 8.0], [20.3, 8.0], [20.4, 8.0], [20.5, 8.0], [20.6, 8.0], [20.7, 8.0], [20.8, 8.0], [20.9, 8.0], [21.0, 8.0], [21.1, 8.0], [21.2, 8.0], [21.3, 8.0], [21.4, 8.0], [21.5, 8.0], [21.6, 8.0], [21.7, 8.0], [21.8, 8.0], [21.9, 8.0], [22.0, 8.0], [22.1, 8.0], [22.2, 8.0], [22.3, 8.0], [22.4, 8.0], [22.5, 8.0], [22.6, 8.0], [22.7, 8.0], [22.8, 8.0], [22.9, 8.0], [23.0, 8.0], [23.1, 8.0], [23.2, 8.0], [23.3, 8.0], [23.4, 8.0], [23.5, 8.0], [23.6, 8.0], [23.7, 8.0], [23.8, 8.0], [23.9, 8.0], [24.0, 8.0], [24.1, 8.0], [24.2, 9.0], [24.3, 9.0], [24.4, 9.0], [24.5, 9.0], [24.6, 9.0], [24.7, 9.0], [24.8, 9.0], [24.9, 9.0], [25.0, 9.0], [25.1, 9.0], [25.2, 9.0], [25.3, 9.0], [25.4, 9.0], [25.5, 9.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 9.0], [26.0, 9.0], [26.1, 9.0], [26.2, 9.0], [26.3, 9.0], [26.4, 9.0], [26.5, 9.0], [26.6, 9.0], [26.7, 9.0], [26.8, 9.0], [26.9, 9.0], [27.0, 9.0], [27.1, 9.0], [27.2, 9.0], [27.3, 9.0], [27.4, 9.0], [27.5, 9.0], [27.6, 9.0], [27.7, 9.0], [27.8, 9.0], [27.9, 9.0], [28.0, 9.0], [28.1, 9.0], [28.2, 10.0], [28.3, 10.0], [28.4, 10.0], [28.5, 10.0], [28.6, 10.0], [28.7, 10.0], [28.8, 10.0], [28.9, 10.0], [29.0, 10.0], [29.1, 10.0], [29.2, 10.0], [29.3, 10.0], [29.4, 10.0], [29.5, 10.0], [29.6, 10.0], [29.7, 10.0], [29.8, 10.0], [29.9, 10.0], [30.0, 10.0], [30.1, 10.0], [30.2, 10.0], [30.3, 10.0], [30.4, 10.0], [30.5, 10.0], [30.6, 10.0], [30.7, 10.0], [30.8, 10.0], [30.9, 10.0], [31.0, 10.0], [31.1, 10.0], [31.2, 11.0], [31.3, 11.0], [31.4, 11.0], [31.5, 11.0], [31.6, 11.0], [31.7, 11.0], [31.8, 11.0], [31.9, 11.0], [32.0, 11.0], [32.1, 11.0], [32.2, 11.0], [32.3, 11.0], [32.4, 11.0], [32.5, 11.0], [32.6, 11.0], [32.7, 11.0], [32.8, 11.0], [32.9, 11.0], [33.0, 11.0], [33.1, 11.0], [33.2, 11.0], [33.3, 11.0], [33.4, 11.0], [33.5, 11.0], [33.6, 11.0], [33.7, 12.0], [33.8, 12.0], [33.9, 12.0], [34.0, 12.0], [34.1, 12.0], [34.2, 12.0], [34.3, 12.0], [34.4, 12.0], [34.5, 12.0], [34.6, 12.0], [34.7, 12.0], [34.8, 12.0], [34.9, 12.0], [35.0, 12.0], [35.1, 12.0], [35.2, 12.0], [35.3, 12.0], [35.4, 12.0], [35.5, 12.0], [35.6, 12.0], [35.7, 13.0], [35.8, 13.0], [35.9, 13.0], [36.0, 13.0], [36.1, 13.0], [36.2, 13.0], [36.3, 13.0], [36.4, 13.0], [36.5, 13.0], [36.6, 13.0], [36.7, 13.0], [36.8, 13.0], [36.9, 13.0], [37.0, 13.0], [37.1, 13.0], [37.2, 13.0], [37.3, 14.0], [37.4, 14.0], [37.5, 14.0], [37.6, 14.0], [37.7, 14.0], [37.8, 14.0], [37.9, 14.0], [38.0, 14.0], [38.1, 14.0], [38.2, 14.0], [38.3, 14.0], [38.4, 14.0], [38.5, 14.0], [38.6, 15.0], [38.7, 15.0], [38.8, 15.0], [38.9, 15.0], [39.0, 15.0], [39.1, 15.0], [39.2, 15.0], [39.3, 15.0], [39.4, 15.0], [39.5, 15.0], [39.6, 15.0], [39.7, 15.0], [39.8, 15.0], [39.9, 15.0], [40.0, 16.0], [40.1, 16.0], [40.2, 16.0], [40.3, 16.0], [40.4, 16.0], [40.5, 16.0], [40.6, 16.0], [40.7, 16.0], [40.8, 16.0], [40.9, 16.0], [41.0, 16.0], [41.1, 16.0], [41.2, 16.0], [41.3, 16.0], [41.4, 17.0], [41.5, 17.0], [41.6, 17.0], [41.7, 17.0], [41.8, 17.0], [41.9, 17.0], [42.0, 17.0], [42.1, 17.0], [42.2, 17.0], [42.3, 17.0], [42.4, 18.0], [42.5, 18.0], [42.6, 18.0], [42.7, 18.0], [42.8, 18.0], [42.9, 18.0], [43.0, 18.0], [43.1, 18.0], [43.2, 18.0], [43.3, 18.0], [43.4, 18.0], [43.5, 19.0], [43.6, 19.0], [43.7, 19.0], [43.8, 19.0], [43.9, 19.0], [44.0, 19.0], [44.1, 19.0], [44.2, 19.0], [44.3, 19.0], [44.4, 20.0], [44.5, 20.0], [44.6, 20.0], [44.7, 20.0], [44.8, 20.0], [44.9, 20.0], [45.0, 20.0], [45.1, 20.0], [45.2, 21.0], [45.3, 21.0], [45.4, 21.0], [45.5, 21.0], [45.6, 21.0], [45.7, 21.0], [45.8, 21.0], [45.9, 21.0], [46.0, 22.0], [46.1, 22.0], [46.2, 22.0], [46.3, 22.0], [46.4, 22.0], [46.5, 22.0], [46.6, 22.0], [46.7, 22.0], [46.8, 23.0], [46.9, 23.0], [47.0, 23.0], [47.1, 23.0], [47.2, 23.0], [47.3, 23.0], [47.4, 23.0], [47.5, 23.0], [47.6, 24.0], [47.7, 24.0], [47.8, 24.0], [47.9, 24.0], [48.0, 24.0], [48.1, 24.0], [48.2, 24.0], [48.3, 25.0], [48.4, 25.0], [48.5, 25.0], [48.6, 25.0], [48.7, 25.0], [48.8, 25.0], [48.9, 26.0], [49.0, 26.0], [49.1, 26.0], [49.2, 26.0], [49.3, 26.0], [49.4, 27.0], [49.5, 27.0], [49.6, 27.0], [49.7, 27.0], [49.8, 27.0], [49.9, 28.0], [50.0, 28.0], [50.1, 28.0], [50.2, 28.0], [50.3, 29.0], [50.4, 29.0], [50.5, 29.0], [50.6, 29.0], [50.7, 29.0], [50.8, 30.0], [50.9, 30.0], [51.0, 30.0], [51.1, 30.0], [51.2, 31.0], [51.3, 31.0], [51.4, 31.0], [51.5, 31.0], [51.6, 32.0], [51.7, 32.0], [51.8, 32.0], [51.9, 32.0], [52.0, 33.0], [52.1, 33.0], [52.2, 33.0], [52.3, 34.0], [52.4, 34.0], [52.5, 34.0], [52.6, 34.0], [52.7, 35.0], [52.8, 35.0], [52.9, 35.0], [53.0, 35.0], [53.1, 36.0], [53.2, 36.0], [53.3, 37.0], [53.4, 37.0], [53.5, 38.0], [53.6, 38.0], [53.7, 38.0], [53.8, 38.0], [53.9, 39.0], [54.0, 39.0], [54.1, 39.0], [54.2, 39.0], [54.3, 40.0], [54.4, 40.0], [54.5, 40.0], [54.6, 41.0], [54.7, 41.0], [54.8, 41.0], [54.9, 41.0], [55.0, 42.0], [55.1, 42.0], [55.2, 43.0], [55.3, 43.0], [55.4, 43.0], [55.5, 44.0], [55.6, 44.0], [55.7, 45.0], [55.8, 45.0], [55.9, 45.0], [56.0, 46.0], [56.1, 46.0], [56.2, 47.0], [56.3, 47.0], [56.4, 47.0], [56.5, 48.0], [56.6, 49.0], [56.7, 49.0], [56.8, 49.0], [56.9, 50.0], [57.0, 50.0], [57.1, 51.0], [57.2, 52.0], [57.3, 52.0], [57.4, 53.0], [57.5, 54.0], [57.6, 54.0], [57.7, 55.0], [57.8, 55.0], [57.9, 56.0], [58.0, 57.0], [58.1, 58.0], [58.2, 58.0], [58.3, 60.0], [58.4, 61.0], [58.5, 61.0], [58.6, 63.0], [58.7, 63.0], [58.8, 63.0], [58.9, 64.0], [59.0, 65.0], [59.1, 66.0], [59.2, 66.0], [59.3, 67.0], [59.4, 68.0], [59.5, 69.0], [59.6, 70.0], [59.7, 71.0], [59.8, 72.0], [59.9, 73.0], [60.0, 74.0], [60.1, 75.0], [60.2, 75.0], [60.3, 76.0], [60.4, 77.0], [60.5, 78.0], [60.6, 79.0], [60.7, 79.0], [60.8, 80.0], [60.9, 81.0], [61.0, 82.0], [61.1, 83.0], [61.2, 85.0], [61.3, 87.0], [61.4, 87.0], [61.5, 88.0], [61.6, 90.0], [61.7, 92.0], [61.8, 94.0], [61.9, 96.0], [62.0, 97.0], [62.1, 98.0], [62.2, 99.0], [62.3, 101.0], [62.4, 103.0], [62.5, 105.0], [62.6, 106.0], [62.7, 107.0], [62.8, 109.0], [62.9, 111.0], [63.0, 113.0], [63.1, 115.0], [63.2, 117.0], [63.3, 119.0], [63.4, 122.0], [63.5, 124.0], [63.6, 128.0], [63.7, 131.0], [63.8, 133.0], [63.9, 135.0], [64.0, 139.0], [64.1, 142.0], [64.2, 145.0], [64.3, 148.0], [64.4, 152.0], [64.5, 156.0], [64.6, 159.0], [64.7, 164.0], [64.8, 167.0], [64.9, 173.0], [65.0, 174.0], [65.1, 178.0], [65.2, 181.0], [65.3, 186.0], [65.4, 190.0], [65.5, 197.0], [65.6, 200.0], [65.7, 205.0], [65.8, 208.0], [65.9, 212.0], [66.0, 216.0], [66.1, 222.0], [66.2, 225.0], [66.3, 231.0], [66.4, 237.0], [66.5, 240.0], [66.6, 243.0], [66.7, 247.0], [66.8, 249.0], [66.9, 253.0], [67.0, 260.0], [67.1, 264.0], [67.2, 267.0], [67.3, 270.0], [67.4, 274.0], [67.5, 278.0], [67.6, 282.0], [67.7, 286.0], [67.8, 289.0], [67.9, 295.0], [68.0, 298.0], [68.1, 301.0], [68.2, 304.0], [68.3, 306.0], [68.4, 309.0], [68.5, 313.0], [68.6, 315.0], [68.7, 318.0], [68.8, 321.0], [68.9, 327.0], [69.0, 332.0], [69.1, 337.0], [69.2, 342.0], [69.3, 346.0], [69.4, 349.0], [69.5, 353.0], [69.6, 356.0], [69.7, 360.0], [69.8, 364.0], [69.9, 367.0], [70.0, 372.0], [70.1, 376.0], [70.2, 381.0], [70.3, 386.0], [70.4, 391.0], [70.5, 394.0], [70.6, 401.0], [70.7, 405.0], [70.8, 411.0], [70.9, 414.0], [71.0, 421.0], [71.1, 425.0], [71.2, 429.0], [71.3, 434.0], [71.4, 438.0], [71.5, 444.0], [71.6, 449.0], [71.7, 453.0], [71.8, 462.0], [71.9, 468.0], [72.0, 474.0], [72.1, 480.0], [72.2, 484.0], [72.3, 488.0], [72.4, 494.0], [72.5, 500.0], [72.6, 503.0], [72.7, 506.0], [72.8, 508.0], [72.9, 511.0], [73.0, 515.0], [73.1, 518.0], [73.2, 520.0], [73.3, 525.0], [73.4, 528.0], [73.5, 530.0], [73.6, 534.0], [73.7, 539.0], [73.8, 541.0], [73.9, 545.0], [74.0, 550.0], [74.1, 553.0], [74.2, 558.0], [74.3, 561.0], [74.4, 563.0], [74.5, 566.0], [74.6, 568.0], [74.7, 571.0], [74.8, 574.0], [74.9, 577.0], [75.0, 582.0], [75.1, 585.0], [75.2, 587.0], [75.3, 589.0], [75.4, 592.0], [75.5, 594.0], [75.6, 597.0], [75.7, 599.0], [75.8, 601.0], [75.9, 604.0], [76.0, 608.0], [76.1, 610.0], [76.2, 612.0], [76.3, 613.0], [76.4, 616.0], [76.5, 617.0], [76.6, 620.0], [76.7, 621.0], [76.8, 623.0], [76.9, 625.0], [77.0, 627.0], [77.1, 630.0], [77.2, 633.0], [77.3, 634.0], [77.4, 636.0], [77.5, 637.0], [77.6, 640.0], [77.7, 641.0], [77.8, 643.0], [77.9, 644.0], [78.0, 646.0], [78.1, 647.0], [78.2, 650.0], [78.3, 651.0], [78.4, 652.0], [78.5, 653.0], [78.6, 655.0], [78.7, 656.0], [78.8, 657.0], [78.9, 658.0], [79.0, 660.0], [79.1, 661.0], [79.2, 662.0], [79.3, 664.0], [79.4, 665.0], [79.5, 667.0], [79.6, 668.0], [79.7, 669.0], [79.8, 670.0], [79.9, 671.0], [80.0, 672.0], [80.1, 674.0], [80.2, 676.0], [80.3, 678.0], [80.4, 680.0], [80.5, 681.0], [80.6, 684.0], [80.7, 685.0], [80.8, 687.0], [80.9, 688.0], [81.0, 689.0], [81.1, 690.0], [81.2, 692.0], [81.3, 693.0], [81.4, 694.0], [81.5, 696.0], [81.6, 697.0], [81.7, 699.0], [81.8, 701.0], [81.9, 703.0], [82.0, 706.0], [82.1, 707.0], [82.2, 709.0], [82.3, 711.0], [82.4, 712.0], [82.5, 715.0], [82.6, 716.0], [82.7, 718.0], [82.8, 719.0], [82.9, 721.0], [83.0, 722.0], [83.1, 724.0], [83.2, 726.0], [83.3, 727.0], [83.4, 729.0], [83.5, 731.0], [83.6, 732.0], [83.7, 735.0], [83.8, 738.0], [83.9, 739.0], [84.0, 740.0], [84.1, 743.0], [84.2, 744.0], [84.3, 746.0], [84.4, 747.0], [84.5, 748.0], [84.6, 749.0], [84.7, 751.0], [84.8, 753.0], [84.9, 755.0], [85.0, 757.0], [85.1, 759.0], [85.2, 761.0], [85.3, 765.0], [85.4, 766.0], [85.5, 767.0], [85.6, 769.0], [85.7, 770.0], [85.8, 773.0], [85.9, 774.0], [86.0, 777.0], [86.1, 780.0], [86.2, 782.0], [86.3, 784.0], [86.4, 785.0], [86.5, 788.0], [86.6, 790.0], [86.7, 792.0], [86.8, 795.0], [86.9, 797.0], [87.0, 799.0], [87.1, 801.0], [87.2, 805.0], [87.3, 807.0], [87.4, 808.0], [87.5, 809.0], [87.6, 811.0], [87.7, 813.0], [87.8, 814.0], [87.9, 816.0], [88.0, 818.0], [88.1, 820.0], [88.2, 822.0], [88.3, 824.0], [88.4, 828.0], [88.5, 829.0], [88.6, 832.0], [88.7, 835.0], [88.8, 838.0], [88.9, 840.0], [89.0, 843.0], [89.1, 845.0], [89.2, 848.0], [89.3, 850.0], [89.4, 851.0], [89.5, 853.0], [89.6, 855.0], [89.7, 857.0], [89.8, 861.0], [89.9, 863.0], [90.0, 865.0], [90.1, 867.0], [90.2, 869.0], [90.3, 871.0], [90.4, 873.0], [90.5, 874.0], [90.6, 877.0], [90.7, 879.0], [90.8, 880.0], [90.9, 882.0], [91.0, 884.0], [91.1, 887.0], [91.2, 888.0], [91.3, 890.0], [91.4, 893.0], [91.5, 895.0], [91.6, 896.0], [91.7, 898.0], [91.8, 900.0], [91.9, 902.0], [92.0, 903.0], [92.1, 904.0], [92.2, 905.0], [92.3, 907.0], [92.4, 910.0], [92.5, 911.0], [92.6, 913.0], [92.7, 915.0], [92.8, 916.0], [92.9, 918.0], [93.0, 920.0], [93.1, 921.0], [93.2, 923.0], [93.3, 924.0], [93.4, 925.0], [93.5, 927.0], [93.6, 928.0], [93.7, 930.0], [93.8, 931.0], [93.9, 932.0], [94.0, 935.0], [94.1, 937.0], [94.2, 939.0], [94.3, 940.0], [94.4, 942.0], [94.5, 943.0], [94.6, 945.0], [94.7, 947.0], [94.8, 950.0], [94.9, 953.0], [95.0, 955.0], [95.1, 958.0], [95.2, 960.0], [95.3, 963.0], [95.4, 965.0], [95.5, 968.0], [95.6, 970.0], [95.7, 972.0], [95.8, 975.0], [95.9, 977.0], [96.0, 980.0], [96.1, 982.0], [96.2, 986.0], [96.3, 989.0], [96.4, 990.0], [96.5, 995.0], [96.6, 999.0], [96.7, 1002.0], [96.8, 1005.0], [96.9, 1009.0], [97.0, 1013.0], [97.1, 1016.0], [97.2, 1019.0], [97.3, 1024.0], [97.4, 1028.0], [97.5, 1031.0], [97.6, 1036.0], [97.7, 1043.0], [97.8, 1049.0], [97.9, 1054.0], [98.0, 1060.0], [98.1, 1069.0], [98.2, 1080.0], [98.3, 1089.0], [98.4, 1099.0], [98.5, 1107.0], [98.6, 1112.0], [98.7, 1121.0], [98.8, 1131.0], [98.9, 1143.0], [99.0, 1155.0], [99.1, 1172.0], [99.2, 1188.0], [99.3, 1206.0], [99.4, 1232.0], [99.5, 1259.0], [99.6, 1287.0], [99.7, 1348.0], [99.8, 1474.0], [99.9, 1521.0], [100.0, 1601.0]], "isOverall": false, "label": "14 Register Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 6220.0, "series": [{"data": [[0.0, 6220.0], [600.0, 598.0], [700.0, 532.0], [800.0, 471.0], [200.0, 253.0], [900.0, 487.0], [1000.0, 180.0], [1100.0, 87.0], [300.0, 250.0], [1200.0, 33.0], [1300.0, 9.0], [1400.0, 16.0], [1500.0, 12.0], [400.0, 191.0], [1600.0, 2.0], [100.0, 335.0], [500.0, 324.0]], "isOverall": false, "label": "14 Register Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10000.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 10000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 10000.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 389.78499999999894, "minX": 1.74279396E12, "maxY": 389.78499999999894, "series": [{"data": [[1.74279396E12, 389.78499999999894]], "isOverall": false, "label": "User Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74279396E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 1147.0, "series": [{"data": [[2.0, 9.0], [3.0, 5.0], [4.0, 7.0], [5.0, 7.0], [6.0, 8.0], [7.0, 10.0], [8.0, 6.0], [9.0, 11.0], [10.0, 8.0], [12.0, 7.5], [13.0, 11.0], [14.0, 11.0], [15.0, 12.0], [16.0, 6.0], [17.0, 8.0], [18.0, 6.0], [19.0, 9.0], [20.0, 10.0], [21.0, 7.0], [23.0, 7.0], [24.0, 10.5], [25.0, 8.0], [26.0, 9.0], [27.0, 10.0], [30.0, 10.0], [31.0, 11.0], [33.0, 8.5], [35.0, 10.0], [34.0, 13.0], [37.0, 20.0], [36.0, 14.0], [39.0, 8.0], [38.0, 17.0], [41.0, 8.0], [40.0, 11.0], [43.0, 11.0], [42.0, 17.0], [45.0, 14.0], [47.0, 15.0], [46.0, 19.0], [49.0, 13.0], [48.0, 17.0], [51.0, 18.0], [50.0, 11.0], [53.0, 16.0], [52.0, 16.0], [55.0, 23.0], [54.0, 27.0], [57.0, 31.0], [56.0, 16.0], [59.0, 14.0], [58.0, 12.0], [61.0, 16.0], [60.0, 15.0], [63.0, 19.0], [62.0, 22.0], [67.0, 23.0], [66.0, 17.0], [65.0, 19.0], [64.0, 34.0], [70.0, 27.0], [69.0, 18.0], [68.0, 22.0], [75.0, 12.0], [74.0, 17.0], [73.0, 30.0], [72.0, 24.0], [79.0, 17.0], [78.0, 26.0], [77.0, 20.0], [76.0, 20.0], [83.0, 18.0], [81.0, 20.0], [80.0, 20.0], [87.0, 21.0], [86.0, 18.0], [85.0, 22.0], [90.0, 25.0], [89.0, 15.0], [95.0, 20.5], [93.0, 23.0], [92.0, 26.0], [99.0, 19.5], [98.0, 20.0], [96.0, 16.0], [102.0, 17.0], [101.0, 21.0], [100.0, 21.0], [107.0, 12.0], [106.0, 10.0], [105.0, 15.0], [104.0, 20.0], [111.0, 15.0], [110.0, 19.0], [109.0, 14.0], [108.0, 9.0], [115.0, 14.0], [114.0, 14.5], [112.0, 12.0], [119.0, 14.0], [118.0, 12.0], [117.0, 12.0], [116.0, 13.0], [123.0, 16.0], [122.0, 15.0], [120.0, 14.0], [127.0, 15.5], [125.0, 12.0], [124.0, 15.0], [135.0, 18.0], [134.0, 16.0], [133.0, 11.0], [132.0, 13.5], [130.0, 18.0], [129.0, 13.0], [143.0, 15.0], [142.0, 9.0], [141.0, 12.0], [140.0, 19.0], [139.0, 17.0], [138.0, 16.0], [137.0, 10.0], [136.0, 18.0], [151.0, 15.0], [150.0, 14.0], [149.0, 13.0], [148.0, 13.0], [147.0, 12.0], [146.0, 15.0], [145.0, 11.0], [144.0, 14.0], [158.0, 17.0], [157.0, 15.0], [156.0, 11.0], [155.0, 13.0], [154.0, 14.0], [153.0, 15.0], [152.0, 15.0], [167.0, 12.0], [166.0, 9.0], [165.0, 12.0], [164.0, 15.0], [163.0, 11.0], [162.0, 17.0], [161.0, 13.0], [160.0, 17.0], [174.0, 18.0], [173.0, 16.5], [171.0, 12.5], [169.0, 20.0], [168.0, 13.0], [183.0, 11.0], [182.0, 18.0], [181.0, 13.0], [180.0, 26.0], [179.0, 15.5], [177.0, 15.0], [176.0, 14.0], [191.0, 11.0], [190.0, 15.0], [189.0, 15.0], [188.0, 12.0], [187.0, 15.0], [186.0, 14.0], [185.0, 10.0], [184.0, 16.0], [199.0, 15.0], [198.0, 13.0], [197.0, 15.0], [196.0, 12.0], [195.0, 11.0], [194.0, 10.0], [193.0, 13.0], [192.0, 19.0], [207.0, 12.0], [206.0, 32.0], [205.0, 13.0], [202.0, 16.0], [201.0, 12.0], [200.0, 8.0], [215.0, 11.0], [214.0, 20.5], [212.0, 17.0], [211.0, 14.0], [209.0, 12.0], [208.0, 18.0], [223.0, 8.0], [222.0, 10.0], [221.0, 16.0], [220.0, 12.0], [219.0, 16.0], [218.0, 14.0], [217.0, 16.0], [216.0, 12.0], [230.0, 16.75], [229.0, 14.363636363636363], [228.0, 10.6], [231.0, 9.333333333333334], [227.0, 7.5], [225.0, 6.75], [224.0, 8.0], [226.0, 7.5], [239.0, 15.75], [238.0, 16.142857142857142], [237.0, 13.571428571428571], [236.0, 11.777777777777779], [235.0, 13.444444444444445], [234.0, 17.5], [233.0, 17.142857142857142], [232.0, 17.181818181818183], [247.0, 21.875], [246.0, 19.333333333333332], [243.0, 17.285714285714285], [241.0, 12.166666666666666], [240.0, 13.25], [242.0, 13.857142857142858], [245.0, 13.545454545454545], [244.0, 11.555555555555555], [255.0, 8.138646288209598], [254.0, 6.756756756756761], [253.0, 6.491228070175439], [252.0, 8.622950819672129], [251.0, 8.178571428571425], [250.0, 14.357142857142854], [248.0, 23.916666666666668], [249.0, 9.384615384615385], [271.0, 38.5686274509804], [269.0, 31.414285714285693], [268.0, 29.986301369863018], [263.0, 23.438202247191008], [256.0, 9.729206963249512], [258.0, 12.911602209944759], [257.0, 11.26459143968872], [259.0, 14.76704545454546], [270.0, 33.50793650793649], [267.0, 27.96103896103896], [266.0, 25.584415584415577], [265.0, 26.235294117647058], [264.0, 24.134328358208947], [262.0, 19.62745098039216], [261.0, 18.78461538461538], [260.0, 15.933774834437086], [286.0, 49.47222222222223], [287.0, 59.166666666666686], [285.0, 47.3421052631579], [284.0, 42.71428571428572], [282.0, 41.34285714285714], [283.0, 40.79999999999999], [281.0, 44.25714285714285], [280.0, 51.078947368421055], [279.0, 40.243243243243256], [278.0, 40.96], [273.0, 36.77272727272728], [272.0, 37.12499999999999], [275.0, 39.20338983050848], [274.0, 43.82089552238807], [277.0, 48.296296296296305], [276.0, 50.81818181818181], [302.0, 83.8], [303.0, 90.0], [296.0, 69.60000000000001], [301.0, 74.05555555555557], [300.0, 58.05555555555555], [299.0, 54.0625], [297.0, 71.80769230769229], [298.0, 65.57692307692307], [295.0, 83.68], [288.0, 50.441860465116285], [291.0, 52.53125], [290.0, 52.441176470588225], [289.0, 54.45454545454547], [293.0, 63.93103448275862], [292.0, 52.390243902439025], [294.0, 71.5925925925926], [318.0, 87.875], [319.0, 103.0], [317.0, 98.66666666666667], [316.0, 123.0], [313.0, 106.72727272727272], [314.0, 96.53846153846153], [315.0, 95.0], [312.0, 94.83333333333333], [311.0, 98.0], [305.0, 81.9], [304.0, 76.79411764705883], [307.0, 76.91666666666667], [306.0, 113.4375], [310.0, 116.23076923076924], [309.0, 164.66666666666669], [308.0, 153.0], [334.0, 122.0], [335.0, 118.75], [333.0, 170.77777777777777], [332.0, 115.5], [331.0, 155.3333333333333], [330.0, 134.25], [329.0, 121.0], [328.0, 147.4], [327.0, 110.83333333333333], [320.0, 101.42857142857143], [321.0, 130.58823529411768], [323.0, 124.54545454545455], [322.0, 120.95], [326.0, 105.8235294117647], [325.0, 105.16666666666666], [324.0, 131.22222222222223], [349.0, 108.0], [350.0, 120.0], [348.0, 222.0], [339.0, 121.2], [338.0, 205.14285714285714], [337.0, 120.83333333333333], [336.0, 89.0], [345.0, 249.7142857142857], [346.0, 203.0], [347.0, 87.0], [343.0, 207.41666666666669], [344.0, 182.63636363636363], [341.0, 174.0], [342.0, 100.0], [340.0, 233.8], [366.0, 209.4], [367.0, 178.33333333333334], [365.0, 231.16666666666666], [364.0, 242.0], [362.0, 204.6], [361.0, 178.5], [360.0, 266.33333333333337], [359.0, 133.33333333333334], [352.0, 286.0], [355.0, 161.0], [354.0, 188.0], [358.0, 246.25], [356.0, 135.0], [363.0, 98.0], [382.0, 180.5], [383.0, 265.3333333333333], [381.0, 274.5], [380.0, 232.0], [379.0, 442.0], [378.0, 284.0], [377.0, 238.0], [375.0, 241.66666666666666], [368.0, 288.5], [370.0, 192.33333333333334], [369.0, 216.33333333333331], [374.0, 306.5], [373.0, 211.5], [372.0, 362.0], [399.0, 280.0], [398.0, 317.0], [395.0, 197.25], [394.0, 241.0], [396.0, 296.75], [387.0, 298.0], [386.0, 280.0], [385.0, 244.71428571428572], [384.0, 240.66666666666663], [397.0, 281.0], [392.0, 304.6], [393.0, 254.0], [391.0, 263.0], [390.0, 215.0], [389.0, 157.0], [388.0, 282.0], [414.0, 306.1333333333334], [415.0, 276.5714285714286], [413.0, 309.875], [412.0, 327.6], [410.0, 303.0], [411.0, 333.7142857142857], [409.0, 215.0], [408.0, 346.2], [407.0, 186.66666666666666], [400.0, 252.0], [403.0, 306.5], [402.0, 396.6], [401.0, 266.6666666666667], [406.0, 332.6666666666667], [405.0, 306.5], [404.0, 273.0], [430.0, 385.25], [431.0, 384.75], [428.0, 362.3333333333333], [427.0, 360.66666666666663], [429.0, 335.2857142857143], [426.0, 423.0], [425.0, 376.15384615384613], [424.0, 356.50000000000006], [423.0, 327.20000000000005], [422.0, 336.6], [416.0, 280.6666666666667], [419.0, 294.5714285714286], [418.0, 390.5], [417.0, 341.3333333333333], [421.0, 389.0], [420.0, 313.8], [446.0, 340.5], [447.0, 337.75], [445.0, 336.5], [444.0, 346.0], [443.0, 460.0], [442.0, 415.75], [441.0, 377.1], [440.0, 357.4117647058824], [439.0, 343.95238095238096], [432.0, 394.625], [435.0, 387.625], [433.0, 287.8333333333333], [438.0, 337.77777777777777], [437.0, 372.64285714285717], [436.0, 318.1111111111111], [461.0, 505.3333333333333], [463.0, 555.5], [460.0, 544.2], [451.0, 405.0], [448.0, 524.0], [459.0, 371.25], [458.0, 423.0], [457.0, 431.0], [456.0, 469.0], [455.0, 148.0], [454.0, 190.5], [453.0, 309.3333333333333], [452.0, 464.0], [477.0, 587.0], [476.0, 551.0], [467.0, 315.0], [466.0, 374.0], [465.0, 312.5], [475.0, 375.0], [473.0, 446.2], [472.0, 367.0], [470.0, 437.6666666666667], [474.0, 455.5], [469.0, 218.0], [468.0, 433.0], [492.0, 351.0], [494.0, 378.57142857142856], [495.0, 437.75], [493.0, 624.6666666666667], [491.0, 403.0], [488.0, 419.57142857142856], [486.0, 425.0], [487.0, 403.3333333333333], [483.0, 584.5], [481.0, 504.0], [480.0, 331.25], [485.0, 448.4], [484.0, 361.6666666666667], [509.0, 463.0], [508.0, 429.3333333333333], [510.0, 320.5], [507.0, 454.5], [505.0, 518.3333333333334], [503.0, 520.25], [504.0, 258.5], [501.0, 462.0], [499.0, 242.0], [498.0, 386.0], [496.0, 486.7142857142858], [497.0, 466.0], [537.0, 660.0], [542.0, 536.6666666666666], [543.0, 533.0], [529.0, 403.0], [528.0, 712.0], [533.0, 595.0], [532.0, 388.5], [531.0, 580.0], [530.0, 503.8], [541.0, 502.6666666666667], [539.0, 533.8], [538.0, 625.0], [540.0, 517.0], [536.0, 575.6666666666666], [519.0, 493.4], [518.0, 669.5], [517.0, 441.3333333333333], [516.0, 532.0], [515.0, 416.0], [514.0, 580.6666666666666], [513.0, 487.0], [512.0, 516.0], [527.0, 425.5], [524.0, 445.3333333333333], [523.0, 577.0], [522.0, 767.0], [521.0, 569.0], [520.0, 552.5], [535.0, 615.0], [534.0, 553.3333333333334], [573.0, 504.5], [574.0, 696.6666666666666], [572.0, 614.25], [570.0, 528.0], [571.0, 734.0], [575.0, 644.0], [569.0, 603.6666666666666], [568.0, 649.9090909090909], [550.0, 525.0], [549.0, 557.5], [548.0, 624.0], [546.0, 482.87500000000006], [545.0, 525.1666666666666], [544.0, 560.6666666666666], [547.0, 622.75], [551.0, 706.0], [559.0, 600.0], [558.0, 577.0], [557.0, 568.0], [556.0, 634.3333333333334], [554.0, 659.0], [553.0, 719.0], [552.0, 590.8333333333334], [566.0, 671.75], [567.0, 593.1], [565.0, 680.5], [564.0, 660.0], [563.0, 733.5], [562.0, 607.75], [561.0, 634.3333333333334], [560.0, 590.75], [605.0, 669.0666666666666], [604.0, 700.7692307692307], [607.0, 662.1333333333333], [606.0, 657.7692307692308], [603.0, 647.1818181818181], [601.0, 747.375], [602.0, 603.5], [599.0, 690.1333333333333], [598.0, 686.3125], [597.0, 669.3333333333333], [596.0, 691.4799999999998], [595.0, 688.4545454545455], [593.0, 709.4], [592.0, 658.0], [594.0, 671.9999999999999], [600.0, 705.1666666666666], [590.0, 670.0], [591.0, 717.0588235294117], [583.0, 718.5833333333333], [582.0, 634.5], [581.0, 654.2857142857142], [579.0, 642.4347826086955], [578.0, 642.0], [577.0, 812.25], [576.0, 662.7500000000001], [580.0, 621.4], [588.0, 689.7499999999999], [587.0, 631.5], [586.0, 707.6666666666666], [584.0, 670.75], [585.0, 708.3333333333333], [589.0, 713.6250000000001], [632.0, 710.8181818181819], [638.0, 723.6666666666666], [639.0, 767.3333333333334], [624.0, 745.5263157894738], [626.0, 727.1052631578948], [625.0, 715.8235294117646], [628.0, 720.25], [627.0, 675.9999999999999], [637.0, 799.7333333333335], [634.0, 765.7857142857144], [633.0, 734.8000000000002], [635.0, 722.6857142857143], [636.0, 701.2857142857142], [623.0, 673.2307692307693], [609.0, 659.3333333333334], [608.0, 695.2727272727273], [622.0, 746.5], [615.0, 678.111111111111], [614.0, 694.3], [613.0, 677.1], [612.0, 751.5], [611.0, 733.6666666666667], [610.0, 688.75], [621.0, 706.2222222222222], [620.0, 734.5], [619.0, 713.1], [618.0, 719.5217391304348], [617.0, 747.2500000000001], [616.0, 691.0909090909091], [631.0, 708.5555555555555], [630.0, 790.8695652173911], [629.0, 752.6764705882355], [665.0, 713.7500000000001], [670.0, 681.5], [671.0, 726.8333333333333], [656.0, 744.1176470588235], [657.0, 745.625], [660.0, 792.6190476190476], [659.0, 710.7499999999999], [658.0, 707.1999999999998], [669.0, 777.0000000000001], [668.0, 832.2], [667.0, 839.4444444444445], [666.0, 765.2857142857142], [664.0, 781.6521739130435], [647.0, 763.1428571428572], [646.0, 762.45], [645.0, 712.1666666666666], [643.0, 767.0588235294117], [642.0, 765.0], [644.0, 739.1111111111111], [640.0, 701.875], [641.0, 747.8333333333334], [655.0, 741.6875000000001], [654.0, 698.5384615384615], [653.0, 748.3333333333333], [652.0, 716.2222222222222], [650.0, 705.0], [648.0, 679.0], [649.0, 811.0], [651.0, 779.4], [663.0, 791.6250000000001], [662.0, 640.2], [661.0, 739.6], [697.0, 796.2], [702.0, 842.0], [703.0, 780.0], [689.0, 790.9411764705883], [688.0, 882.9375], [691.0, 846.8749999999999], [692.0, 815.8823529411765], [690.0, 805.0], [701.0, 865.5], [700.0, 791.5], [698.0, 862.0], [699.0, 761.0], [696.0, 874.0], [679.0, 885.1666666666666], [678.0, 793.0], [677.0, 808.125], [676.0, 790.0], [675.0, 815.375], [674.0, 834.1666666666666], [673.0, 770.3636363636364], [672.0, 755.1666666666666], [687.0, 803.6923076923078], [686.0, 828.3333333333334], [685.0, 835.9090909090909], [683.0, 828.7500000000001], [684.0, 778.1000000000001], [680.0, 775.5], [681.0, 739.75], [682.0, 729.3333333333334], [694.0, 837.2272727272727], [695.0, 845.7777777777778], [693.0, 759.125], [732.0, 906.6428571428571], [735.0, 894.1428571428572], [721.0, 902.2666666666667], [720.0, 874.2499999999999], [723.0, 882.9047619047619], [722.0, 915.6470588235295], [725.0, 883.2500000000001], [724.0, 878.4375000000001], [734.0, 868.2857142857142], [733.0, 936.1666666666667], [730.0, 923.6153846153845], [731.0, 933.2631578947368], [729.0, 900.75], [728.0, 945.6666666666666], [718.0, 921.3333333333334], [717.0, 865.25], [715.0, 867.3333333333334], [714.0, 877.8571428571428], [713.0, 956.0], [719.0, 912.4444444444445], [704.0, 853.0], [707.0, 922.0], [706.0, 869.6], [711.0, 905.0], [709.0, 917.5], [727.0, 935.4615384615386], [726.0, 925.9333333333335], [742.0, 1011.0], [764.0, 876.8], [761.0, 863.0], [763.0, 954.0], [765.0, 942.0769230769231], [767.0, 679.0], [752.0, 1012.0370370370373], [748.0, 973.2592592592594], [751.0, 932.625], [743.0, 1034.333333333333], [741.0, 963.6666666666667], [740.0, 924.8], [739.0, 936.4705882352943], [738.0, 912.75], [736.0, 904.1666666666666], [737.0, 979.2], [749.0, 1051.576923076923], [750.0, 982.7333333333332], [760.0, 503.7142857142857], [746.0, 1059.6363636363635], [745.0, 1044.9999999999998], [744.0, 918.9473684210526], [747.0, 1147.0], [766.0, 953.5], [753.0, 1010.6666666666664], [756.0, 917.0909090909091], [755.0, 1024.3333333333333], [754.0, 961.4285714285714], [758.0, 1103.5714285714284], [759.0, 982.0], [757.0, 975.0666666666666], [792.0, 707.6666666666666], [772.0, 620.5], [771.0, 419.0], [770.0, 935.5], [769.0, 1096.0], [768.0, 811.0], [782.0, 1062.142857142857], [783.0, 1137.458333333333], [773.0, 597.0], [774.0, 889.8888888888889], [775.0, 1131.3], [784.0, 931.0714285714287], [779.0, 1006.8333333333333], [776.0, 1116.2], [778.0, 1054.8666666666668], [777.0, 1132.6], [780.0, 983.6111111111111], [781.0, 940.0], [787.0, 961.7333333333333], [785.0, 1023.3750000000002], [786.0, 938.2352941176471], [788.0, 1012.0909090909091], [789.0, 930.0], [790.0, 1116.6666666666667], [791.0, 967.8333333333334], [797.0, 980.3333333333334], [798.0, 777.0], [799.0, 766.0], [796.0, 823.4285714285714], [793.0, 837.0], [794.0, 1081.0], [795.0, 935.0], [802.0, 662.4285714285713], [810.0, 526.5], [809.0, 815.4], [811.0, 787.25], [806.0, 639.5], [824.0, 610.0], [807.0, 828.0], [825.0, 785.0], [805.0, 811.0], [803.0, 908.8], [814.0, 586.5], [815.0, 409.0], [800.0, 915.0], [822.0, 577.0], [813.0, 852.5], [812.0, 713.0], [826.0, 718.3333333333334], [827.0, 587.0], [829.0, 623.5], [816.0, 821.5], [819.0, 761.0], [817.0, 1000.0], [820.0, 895.7], [860.0, 754.0], [850.0, 688.0], [861.0, 693.8333333333334], [853.0, 751.5], [859.0, 718.6666666666666], [857.0, 907.5], [858.0, 931.0], [838.0, 743.4], [845.0, 675.0], [837.0, 597.0], [834.0, 599.0], [832.0, 610.0], [844.0, 684.5], [851.0, 730.0], [852.0, 926.6666666666666], [863.0, 678.0], [843.0, 708.5], [840.0, 691.3333333333334], [849.0, 672.3333333333334], [878.0, 769.0], [870.0, 674.0], [871.0, 630.1666666666666], [889.0, 561.0], [888.0, 929.0], [892.0, 786.0], [893.0, 717.0], [894.0, 567.0], [875.0, 692.0], [872.0, 674.3333333333334], [882.0, 658.0], [883.0, 767.0], [885.0, 748.0], [887.0, 806.1428571428571], [886.0, 681.75], [876.0, 559.0], [881.0, 623.0], [868.0, 761.5], [867.0, 686.0], [865.0, 632.25], [879.0, 620.0], [911.0, 761.0], [910.0, 849.0], [913.0, 751.0], [927.0, 895.0], [925.0, 792.6666666666666], [922.0, 858.0], [926.0, 717.0], [921.0, 745.5], [920.0, 852.0], [898.0, 768.5], [901.0, 816.0], [899.0, 620.0], [903.0, 816.0], [908.0, 729.0], [914.0, 614.0], [915.0, 558.0], [916.0, 755.0], [906.0, 751.0], [904.0, 658.0], [918.0, 758.5], [919.0, 611.0], [928.0, 783.0], [931.0, 784.0], [933.0, 620.0], [936.0, 779.6666666666666], [937.0, 895.0], [935.0, 818.0], [938.0, 815.0], [1.0, 6.0]], "isOverall": false, "label": "14 Register Request", "isController": false}, {"data": [[389.78469999999794, 261.12499999999744]], "isOverall": false, "label": "14 Register Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 938.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 42666.666666666664, "minX": 1.74279396E12, "maxY": 44783.166666666664, "series": [{"data": [[1.74279396E12, 42666.666666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74279396E12, 44783.166666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74279396E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 261.12499999999744, "minX": 1.74279396E12, "maxY": 261.12499999999744, "series": [{"data": [[1.74279396E12, 261.12499999999744]], "isOverall": false, "label": "14 Register Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74279396E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 261.09449999999924, "minX": 1.74279396E12, "maxY": 261.09449999999924, "series": [{"data": [[1.74279396E12, 261.09449999999924]], "isOverall": false, "label": "14 Register Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74279396E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.398000000000004, "minX": 1.74279396E12, "maxY": 6.398000000000004, "series": [{"data": [[1.74279396E12, 6.398000000000004]], "isOverall": false, "label": "14 Register Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74279396E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 143.0, "maxY": 978.5, "series": [{"data": [[521.0, 774.0], [542.0, 708.0], [514.0, 6.0], [143.0, 591.0], [568.0, 62.5], [561.0, 34.0], [594.0, 887.0], [615.0, 286.0], [651.0, 600.0], [359.0, 11.0], [449.0, 19.0], [493.0, 32.0], [487.0, 9.0], [496.0, 978.5], [499.0, 15.0], [508.0, 8.0], [501.0, 8.0], [498.0, 8.0], [500.0, 7.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 651.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 143.0, "maxY": 978.5, "series": [{"data": [[521.0, 774.0], [542.0, 708.0], [514.0, 6.0], [143.0, 591.0], [568.0, 62.5], [561.0, 34.0], [594.0, 887.0], [615.0, 286.0], [651.0, 600.0], [359.0, 11.0], [449.0, 19.0], [493.0, 32.0], [487.0, 9.0], [496.0, 978.5], [499.0, 15.0], [508.0, 8.0], [501.0, 8.0], [498.0, 8.0], [500.0, 7.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 651.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.74279396E12, "maxY": 166.66666666666666, "series": [{"data": [[1.74279396E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74279396E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.74279396E12, "maxY": 166.66666666666666, "series": [{"data": [[1.74279396E12, 166.66666666666666]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74279396E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.74279396E12, "maxY": 166.66666666666666, "series": [{"data": [[1.74279396E12, 166.66666666666666]], "isOverall": false, "label": "14 Register Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74279396E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.74279396E12, "maxY": 166.66666666666666, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74279396E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74279396E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

